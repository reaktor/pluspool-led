.data-range-picker {
  display: flex;
  opacity: var(--page-state-1-opacity);
  transition: opacity 1s;
  position: relative;
  z-index: var(--data-range-picker--z-index);
}

@media (max-width: 559px) {
  .data-range-picker {
    flex-direction: column;
    align-self: flex-end;
  }
}

@media (min-width: 560px) {
  .data-range-picker {
    justify-self: flex-start;
  }
}

.data-range-picker__slider-container {
  position: relative;
  width: 100%;
}

.data-range-picker__handle-label {
  position: absolute;
  left: -80px;
  bottom: 100%;
  width: 160px;
  font-size: 16px;
  line-height: 21px;
  margin-bottom: 8px;
  text-align: center;
  opacity: 0;
  transition: opacity 0.3s;
}

@media (min-width: 560px) {
  .data-range-picker__handle-label {
    top: 0;
    left: 100%;
    bottom: auto;
    margin-top: -0.6em;
    margin-left: 12px;
    text-align: left;
    opacity: 0;
    transition: opacity 0.3s;
  }
}

.data-range-picker__handle-label[data-visible="true"] {
  opacity: 1;
}

.data-range-picker__slider {
  width: 100%;
}

.data-range-picker__labels {
  display: flex;
  justify-content: space-between;
  font-size: 16px;
  line-height: 21px;
  margin-top: 10px;
}

@media (min-width: 560px) {
  .data-range-picker__labels {
    flex-direction: column;
    font-size: 24px;
    line-height: 32px;
    margin-top: 0;
    margin-left: 12px;
    margin-top: -0.6em;
    margin-bottom: -0.6em;
  }
}

/**
  RC Slider Style Overrides

  NOTE:
    The repeating of the className in each selector is intentional.

  TLDR:
    We need more specificity in order to override default styles that come from RC Slider.

  Why are there repeating classNames in selectors?
    In order to discuss specificity an online calculator can help us invision things.
    One can be found here: https://specificity.keegan.st/
    If we put in the selector `.rc-slider` into that calculator we should see a score of:
      0 - IDs
      1 - Classes, attributes and pseudo-classes
      0 - Elements and pseudo-elements
    
    The className `.rc-slider` is the selector being used in RC Sliders styles. Our goal is to overwrite some of these.
    There are a number of ways for us to overwrite this including:
      1. Put `!important` in our declarations.
      2. Put our CSS after RC Sliders CSS
      3. Make our selector more specific

    The technique in 1 was somewhat the standard way of achieving this in the past. It will reliably work
    but it also throws out all the scaling of specificity. If we have any further styles that interact with these selectors
    and we used an `!important` it can become quite difficult to be "more specific" when you've thrown the hole scale
    out of the window.

    The technique in 2 I believed would be hard to ensure. We are using Javascript to bundle our CSS and it's an app with client side routing.
    I decided that it would be too much of a pain to configure our app to include css bundles in a specific order.

    The technique in 3 is the one in place. If we go back to the online calculator and input `.rc-slider.rc-slider` we should see a score of:
      0 - IDs
      2 - Classes, attributes and pseudo-classes
      0 - Elements and pseudo-elements
    This score is higher than the score we got when using just 1 className.
    The trick here is that `.rc-slider.rc-slider` is basically looking for a `.rc-slider` element that also has the className `.rc-slider`.
    It is NOT asking for an element that has that class twice. Logically it is really no different than just putting the className once
    however it allows us to up our accessibility score. 
    If RC Slider we using a selector with 3, 4, or 5 elements in it, we could just write our overwriting selector here with one more className
    than what they are using.

  */

  @media (max-width: 559px) {
    .rc-slider.rc-slider {
      border-radius: 0;
      padding: 0;
      height: 85px;
    }
  
    .rc-slider-handle.rc-slider-handle {
      color: #000000;
      border-radius: 0;
      box-shadow: none;
      border: 0;
      height: 100%;
      width: 3px;
      background-color: currentColor;
      margin: 0 -1px;
      transition: color 0.1s ease-in-out;
    }
  
    /**
    * This element allows us to make the draggable area
    * of .rc-slider-handle larger without having to change .rc-slider-handle size.
    * This makes it easier to make .rc-slider-handle visually 3px tall
    * and it's draggable area 60px larger.
    */
    .rc-slider-handle.rc-slider-handle:before {
      content: '';
      position: absolute;
      top: 0px;
      right: 0px;
      bottom: 0px;
      left: 0px;
    }

  
    .rc-slider-track.rc-slider-track {
      border-radius: 0;
      background: transparent;
      left: 0;
      width: 100%;
      height: 100%;
    }
  
    .rc-slider-rail.rc-slider-rail {
      border-radius: 0;
      background: transparent;
      background-image: url('/static/img/bar-lines-mobile.svg');
      background-position: 0 bottom;
      background-size: 100% auto;
      background-repeat: no-repeat;
      bottom: 0;
      height: 100%;
    }
  
    .rc-slider-mark.rc-slider-mark {
      display: none;
    }
  }

@media (min-width: 560px) {
  .rc-slider.rc-slider {
    border-radius: 0;
    padding: 0;
    width: 85px;
  }

  .rc-slider-handle.rc-slider-handle {
    color: #7F7F7F;
    border-radius: 0;
    box-shadow: none;
    border: 0;
    width: 100%;
    height: 3px;
    background-color: currentColor;
    margin-left: 0;
    margin-top: -1px;
    margin-bottom: -1px;
    transition: color 0.1s ease-in-out;
  }

  /**
  * This element allows us to make the draggable area
  * of .rc-slider-handle larger without having to change .rc-slider-handle size.
  * This makes it easier to make .rc-slider-handle visually 3px tall
  * and it's draggable area 60px larger.
  */
  .rc-slider-handle.rc-slider-handle:before {
    content: '';
    position: absolute;
    top: -30px;
    right: -130px;
    bottom: -30px;
    left: 0px;
  }

  .rc-slider-handle.rc-slider-handle:hover {
    color: #000000;
  }

  .rc-slider-track.rc-slider-track {
    border-radius: 0;
    background: transparent;
    left: 0;
    width: 100%;
  }

  .rc-slider-rail.rc-slider-rail {
    border-radius: 0;
    background: transparent;
    background-image: url('/static/img/bar-lines-desktop.svg');
    background-position: 0 0;
    background-size: auto 100%;
    background-repeat: no-repeat;
    left: 0;
    width: 100%;
  }

  .rc-slider-mark.rc-slider-mark {
    display: none;
  }
}