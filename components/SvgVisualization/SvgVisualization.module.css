.container {
  position: fixed;
  top: 50px;
  right: 0;
  bottom: 0;
  left: 0;
  overflow: hidden;
  z-index: var(--svg-visualization--z-index);
}

.container svg {
  width: 100%;
  height: 100%;
  overflow: visible;
}

@media (min-width: 560px) {
  .container svg {
    /**
     * Push our animation down and to the left a bit.
     * This fills our white space a bit better. 
     */
    transform: translate3d(60px, 100px, 0px);
  }
}

/**
 * There are transforms, transitions, and animations happening on 2 separate elements below.
 *
 * These elements are:
 * 1. .dataPointPositioningAnimation 
 *   - Used to scale the circles in and out when our sample changes. Has some delay in order to stagger the transition.
 *   - Accomplished using two CSS animations triggered in JS.
 * 2. .dataPointBreathingAnimation
 *   - Used to scale the circles in and out slowly all the time.
 *   - Accomplished using a CSS animation that is always running.
 * 
 * There are a couple reasons for breaking this out to 2 elements which all come down to breaking up concerns. 
 * All 3 of those elements deal with a CSS scale transform. It would be quite complicated to manage all 
 * of this scaling on 1 element. In order to do so we would need Javascript to do math and look at 2 different
 * inputs to determine 1 scaling factor. Javscript would need to look at
 *   1. Where am I currently located, possibly during an animation between positions.
 *   2. What's the progress of our breathing animation.
 * With those three it would do some convoluted calculation to give us a number for our circle scale. 
 * 
 * Instead of generating 1 convoluted number, we break the 2 of those concerns out to separate transforms that can more easily be managed.
 */

.dataPointPositioningAnimation {
  /**
   * transform-origin behaves differently on SVG elements than DOM elements.
   * 
   * > "For SVG elements, the origin is ... at the 0 0 point of the SVG canvas."
   * - https://css-tricks.com/transforms-on-svg-elements/
   * 
   * What we do here is set the transform-origin of each circle to the center of itself.
   */
  transform-origin: var(--data-point--translate-x) var(--data-point--translate-y);
  transform:
    scale(var(--data-point--scale))
    translate3d(
      var(--data-point--translate-x),
      var(--data-point--translate-y),
      0
    );
}

@keyframes svg-data-point-positioning-out-animation {
  0% {
    transform:
      scale(var(--data-point--scale))
      translate3d(
        var(--data-point--translate-x),
        var(--data-point--translate-y),
        0
      );
  }

  100% {
    transform:
      scale(0)
      translate3d(
        var(--data-point--translate-x),
        var(--data-point--translate-y),
        0
      );
  }
}

@keyframes svg-data-point-positioning-in-animation {
  0% {
    transform:
      scale(0)
      translate3d(
        var(--data-point--translate-x),
        var(--data-point--translate-y),
        0
      );
  }

  100% {
    transform:
      scale(var(--data-point--scale))
      translate3d(
        var(--data-point--translate-x),
        var(--data-point--translate-y),
        0
      );
  }
}

.container[data-animate-state="start"] .dataPointPositioningAnimation {
  transform:
    scale(0)
    translate3d(
      var(--data-point--translate-x),
      var(--data-point--translate-y),
      0
    );
}

.container[data-animate-state="out"] .dataPointPositioningAnimation {
  animation:
    svg-data-point-positioning-out-animation
    var(--data-point--animation-out-duration)
    var(--data-point--animation-out-delay)
    cubic-bezier(1.000, 0.010, 0.345, 1.000)
    forwards;
}

.container[data-animate-state="in"] .dataPointPositioningAnimation {
  transform:
    scale(0)
    translate3d(
      var(--data-point--translate-x),
      var(--data-point--translate-y),
      0
    );

  animation:
    svg-data-point-positioning-in-animation
    var(--data-point--animation-in-duration)
    var(--data-point--animation-in-delay)
    cubic-bezier(1.000, 0.010, 0.345, 1.000)
    forwards;
}

@keyframes svg-data-point-ambient-scale-animation {
  0%, 
  100% {
    transform: scale(0.85);
  }

  50% {
    transform: scale(1.15);
  }
}

.dataPointBreathingAnimation {
  animation:
    svg-data-point-ambient-scale-animation
    20s
    ease-in-out
    infinite;
}
